# -*- coding: utf-8 -*-
"""task-1 (similarity between these 5 learners and recommend their learning partner)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nKEganyELxlHBWFB9-GsS8HgrcBwp2Ne
"""

import requests
from newspaper import Article
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np

urls = [input().strip() for _ in range(int(input()))]

urls

def extract_article(url):
    article = Article(url)
    article.download()
    article.parse()
    return article.text

contents = [extract_article(url) for url in urls]
'''
contents=[]
count=0
for i in urls:
  contents.append(extract_article(i))
  contents.append(count)
  count+=1'''

vectorizer = TfidfVectorizer(stop_words='english')
features_matrix = vectorizer.fit_transform(contents)

similarity_matrix = cosine_similarity(features_matrix)

authors = ['Person1', 'Person2', 'Person3', 'Person4', 'Person5']

recommendations = {}
for i, author in enumerate(authors):
    similar_indices = np.argsort(-similarity_matrix[i])[1:]
    recommended_partner = authors[similar_indices[0]]
    recommendations[author] = recommended_partner

for author, partner in recommendations.items():
    print(f"{author}'s recommended learning partner: {partner}")

import pandas as pd

df_contents = pd.DataFrame({
    'author': ['Person1', 'Person2', 'Person3', 'Person4', 'Person5'],
    'content': contents
})

# Display the extracted content
print(df_contents)

pip install evidently

from evidently.report import Report
from evidently.metrics import DataDriftTable
from evidently import ColumnMapping

reference_data = df_contents.copy()

updated_contents = [
    'Updated content 1',
    'Updated content 2',
    'Updated content 3',
    'Updated content 4',
    'Updated content 5'
]

current_data = pd.DataFrame({
    'author': df_contents['author'],
    'content': updated_contents
})
column_mapping = ColumnMapping(
    numerical_features=[],
    categorical_features=['content']
)

report = Report(
    metrics=[
        DataDriftTable(),
    ]
)


report.run(reference_data=reference_data, current_data=current_data, column_mapping=column_mapping)

report.save_html('content_similarity_monitoring_report.html')

with open('content_similarity_monitoring_report.html', 'r') as file:
    report_content = file.read()

print(report_content[:1000])

